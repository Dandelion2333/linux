Linux线程间通信及同步机制
一、互斥与同步
	1、互斥：当一个资源被一个线程访问后，前者被上锁。则其他线程不能访问此资源了！
				但是，线程的访问顺序不受限制，即为无序的。
	
	2、同步：在互斥的基础上，对资源进行有序的访问。在大多数情况下，同步即互斥了。例如，写操作。
				少数情况下可以多个线程操作资源（我觉得是只读的情况）

二、线程同步的方法（使用不同的方式做同步，有不同的优劣势）
	1、互斥锁：本质上是一个把锁。在某一个资源被访问前，会先进行上锁操作。其他想要访问的线程只能处于阻塞状态。当访问结束后会进行解锁操作。
				此时，假如被阻塞的线程有一个以上，那么所有的线程都会进入可运行状态，第一个变成运行状态的线程会对互斥量（即资源）上锁。	

				应用场景：由于线程没有上锁成功则会进入休眠状态，不占用CPU资源。互斥锁创建是需要消耗大量的资源（相对于自旋锁），所以前者适合线程阻塞时间长的场景
	
	2、读写锁：它是互斥锁的升级版。拥有三种状态：
				1、读模式下的加锁状态：当其他的线程想要读（加锁）资源时，他们都能获取加锁权限（即可以正常读取资源）
										值得注意的是，当线程想要写操作，那么将不被允许（即阻塞）
				2、写模式写的加锁状态：当其他的线程想要写（加锁）资源时，他们会被阻塞（与互斥量一样）
				3、解锁状态：线程可以加锁，访问资源。
				与互斥锁（互斥量）相比，提高并行性。适合读次数大于写次数的情况。
	
	3、条件变量：与互斥锁配合使用。当互斥锁解锁后，条件变量则告诉下一个线程可以使用此资源。
	
	4、信号量：它是一个非负的计数器。当消耗一个资源时，计数器减一，当释放一个资源时，计数器加一
				可以控制多个线程对资源的访问。
	
	5、自旋锁：当自旋锁被线程上锁后，其他线程想要获取自旋锁时，则该线程会一直处在自旋状态（此时会消耗CPU）
				直到自旋锁被解锁，则后者从自旋状态进入上锁状态。
				
				这里容易引发一个问题。假如上锁的线程一直不释放自旋锁，则另一个进程会一直处在自旋状态，一直消耗CPU资源
					会导致系统挂起。所以，线程使用完资源后，需要把自旋锁解锁。
				
				应用场景：由于线程没有上锁成功，则会一直占用CPU资源。自旋锁创建时只需要较小的资源（相对于互斥锁）。所以，它适合用于线程阻塞时间短的场景。
	
	6、屏障：支持多个线程同步。当多个线程在使用过程中，其中一个本次操作执行完成（例如操作资源完成）
				它会等待其他的线程执行完成，直到所有的线程都执行完，本轮操作就结束了。然后继续下一轮。
				